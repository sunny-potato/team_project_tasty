image: node:latest # Use a docker image from https://hub.docker.com with latest Node.js already installed

variables:
  # Configure server/src/mysql-pool.ts
  MYSQL_HOST: localhost
  MYSQL_USER: test
  MYSQL_PASSWORD: test
  MYSQL_DATABASE: test

stages:
  - build # Jobs placed in build stage will run first
  - test # Jobs placed in test stage will run after build jobs

install:
  stage: build
  script:
    - cd server
    - npm install
    - cd ../client
    - npm install
  artifacts: # Keep node_modules folder for the following stages
    paths:
     - server/node_modules
     - client/node_modules

test:
  stage: test
  script:
    - apt-get update
    - apt-get -y upgrade
    - apt-get -y install default-mysql-server
    - service mariadb start
    # Create database
    - mysqladmin create $MYSQL_DATABASE
    # Create database table
    - >
      echo "CREATE TABLE cart (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, recipes_id VARCHAR(255) NOT NULL);" | mysql $MYSQL_DATABASE
      echo "CREATE TABLE ingredients (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255));" | mysql $MYSQL_DATABASE
      echo "CREATE TABLE recipes (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255) NOT NULL, meal_type VARCHAR(255), new BOOLEAN, popular BOOLEAN, description TEXT);" | mysql $MYSQL_DATABASE
      echo "CREATE TABLE relations (recipes_id INT, ingredients_id INT, unit_id INT, amount FLOAT);" | mysql $MYSQL_DATABASE
      echo "CREATE TABLE units (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255));" | mysql $MYSQL_DATABASE
    # Add test user and grant access
    - >
      echo "CREATE USER '$MYSQL_USER'@'%' IDENTIFIED BY '$MYSQL_PASSWORD'; GRANT ALL PRIVILEGES ON
      $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%'; FLUSH PRIVILEGES;" | mysql
    # Workaround for mysql2
    - export MYSQL_HOST=127.0.0.1

    - cd server
    - touch test/config.ts
    - npm test

    - cd ../client
    - npm test